{"version":3,"sources":["../src/question_status.js"],"names":["getFragment","args","contextId","Fragment","loadFragment","save","modal","questionId","target","formData","getBody","find","serialize","responseAjax","Ajax","call","methodname","questionid","formdata","done","result","status","innerText","statusname","fail","Notification","exception","statusEvent","ModalFactory","create","type","types","SAVE_CANCEL","title","Str","get_string","body","large","show","root","getRoot","on","ModalEvents","e","preventDefault","stopPropagation","hide","init","questionSelector","document","querySelector","getAttribute","addEventListener"],"mappings":"oiBAwBA,OACA,OACA,OACA,OACA,OACA,O,4lBAUMA,CAAAA,CAAW,CAAG,SAACC,CAAD,CAAOC,CAAP,CAAqB,CACrC,MAAOC,WAASC,YAAT,CAAsB,oBAAtB,CAA4C,iBAA5C,CAA+DF,CAA/D,CAA0ED,CAA1E,CACV,C,CAUKI,CAAI,CAAG,SAACC,CAAD,CAAQC,CAAR,CAAoBC,CAApB,CAA+B,IACpCC,CAAAA,CAAQ,CAAGH,CAAK,CAACI,OAAN,GAAgBC,IAAhB,CAAqB,MAArB,EAA6BC,SAA7B,EADyB,CAEpCC,CAAY,CAAGC,UAAKC,IAAL,CAAU,CAAC,CAC1BC,UAAU,CAAE,+BADc,CAE1Bf,IAAI,CAAE,CACFgB,UAAU,CAAEV,CADV,CAEFW,QAAQ,CAAET,CAFR,CAFoB,CAAD,CAAV,CAFqB,CASxCI,CAAY,CAAC,CAAD,CAAZ,CAAgBM,IAAhB,CAAqB,SAASC,CAAT,CAAiB,CAClC,GAAIA,CAAM,CAACC,MAAX,CAAmB,CACfb,CAAM,CAACc,SAAP,CAAmBF,CAAM,CAACG,UAC7B,CACJ,CAJD,EAIGC,IAJH,CAIQC,UAAaC,SAJrB,EAKA,QACH,C,CAUKC,CAAW,CAAG,SAACpB,CAAD,CAAaL,CAAb,CAAwBM,CAAxB,CAAmC,CAInDoB,UAAaC,MAAb,CAAoB,CAChBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,WADT,CAEhBC,KAAK,CAAEC,CAAG,CAACC,UAAJ,CAAe,sBAAf,CAAuC,oBAAvC,CAFS,CAGhBC,IAAI,CAAEpC,CAAW,CANV,CACPiB,UAAU,CAAEV,CADL,CAMU,CAAOL,CAAP,CAHD,CAIhBmC,KAAK,GAJW,CAApB,EAKGlB,IALH,CAKQ,SAACb,CAAD,CAAW,CACfA,CAAK,CAACgC,IAAN,GACA,GAAIC,CAAAA,CAAI,CAAGjC,CAAK,CAACkC,OAAN,EAAX,CACAD,CAAI,CAACE,EAAL,CAAQC,UAAYrC,IAApB,CAA0B,SAASsC,CAAT,CAAY,CAClCA,CAAC,CAACC,cAAF,GACAD,CAAC,CAACE,eAAF,GACAxC,CAAI,CAACC,CAAD,CAAQC,CAAR,CAAoBC,CAApB,CAAJ,CACAF,CAAK,CAACwC,IAAN,EACH,CALD,EAMA,MAAOxC,CAAAA,CACV,CAfD,EAeGkB,IAfH,CAeQC,UAAaC,SAfrB,CAgBH,C,QAQmB,QAAPqB,CAAAA,IAAO,CAACC,CAAD,CAAsB,IAClCxC,CAAAA,CAAM,CAAGyC,QAAQ,CAACC,aAAT,CAAuBF,CAAvB,CADyB,CAGlCzC,CAAU,CAAGC,CAAM,CAAC2C,YAAP,CAAoB,iBAApB,CAHqB,CAItC3C,CAAM,CAAC4C,gBAAP,CAAwB,OAAxB,CAAiC,UAAM,CAEnCzB,CAAW,CAACpB,CAAD,CAJC,CAID,CAAwBC,CAAxB,CACd,CAHD,CAIH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Status column selector js.\n *\n * @package    qbank_editquestion\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\n\n/**\n * Get the fragment.\n *\n * @method getFragment\n * @param {{questioned: int}} args\n * @param {int} contextId\n * @return {string}\n */\nconst getFragment = (args, contextId) => {\n    return Fragment.loadFragment('qbank_editquestion', 'question_status', contextId, args);\n};\n\n/**\n * Save the status.\n *\n * @method getFragment\n * @param {object} modal\n * @param {int} questionId\n * @param {object} target\n */\nconst save = (modal, questionId, target) => {\n    let formData = modal.getBody().find('form').serialize();\n    let responseAjax = Ajax.call([{\n        methodname: 'qbank_editquestion_set_status',\n        args: {\n            questionid: questionId,\n            formdata: formData\n        }\n    }]);\n    responseAjax[0].done(function(result) {\n        if (result.status) {\n            target.innerText = result.statusname;\n        }\n    }).fail(Notification.exception);\n    return true;\n};\n\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {int} questionId\n * @param {int} contextId\n * @param {object} target\n */\nconst statusEvent = (questionId, contextId, target) => {\n    let args = {\n        questionid: questionId\n    };\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: Str.get_string('questionstatusheader', 'qbank_editquestion'),\n        body: getFragment(args, contextId),\n        large: false,\n    }).done((modal) => {\n        modal.show();\n        let root = modal.getRoot();\n        root.on(ModalEvents.save, function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            save(modal, questionId, target);\n            modal.hide();\n        });\n        return modal;\n    }).fail(Notification.exception);\n};\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {string} questionSelector the question status identifier.\n */\nexport const init = (questionSelector) => {\n    let target = document.querySelector(questionSelector);\n    let contextId = 1;\n    let questionId = target.getAttribute('data-questionid');\n    target.addEventListener('click', () => {\n        // Call for the event listener to listed for clicks in any usage count row.\n        statusEvent(questionId, contextId, target);\n    });\n};\n"],"file":"question_status.min.js"}