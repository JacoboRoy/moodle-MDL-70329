{"version":3,"sources":["../src/filter.js"],"names":["filterSet","applyCallback","pendingPromise","Pending","rownum","getFilterRegion","querySelectorAll","Selectors","filter","region","length","Templates","renderForPromise","then","html","js","newContentNodes","appendNodeContents","filterRow","typeList","querySelector","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","activeFilters","courseid","CourseFilter","filterset","addEventListener","e","target","closest","actions","addRow","preventDefault","addFilterRow","applyFilters","updateTableFromFilter","resetFilters","removeAllFilters","regions","filterlist","remove","removeOrReplaceFilterRow","filterRegion","CustomEvents","define","events","accessibleChange","on","typeField","value","addFilter","join","dataset","filterverb","filterType","filterDataNode","datasource","byName","initialFilterValues","getFilterDataSource","Filter","GenericFilter","filterTypeClass","disabled","name","refreshContent","filterCount","replaceFilterRow","removeFilterRow","hasFilterValue","removeFilterObject","getAvailableFilterLegends","filterLegends","index","innerText","rowNum","replaceNode","filterName","getFilterObject","tearDown","filters","options","option","classList","add","addRowButton","all","setAttribute","removeAttribute","filtermatch","Object","values","filterValue","maxFilters","document","typeListSelect","requests","Array","_","rowIndex","push","fetchedStrings","legendStrings"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter management.\n *\n * @module     core/filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from 'core/local/filter/filtertypes/courseid';\nimport GenericFilter from 'core/local/filter/base';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from 'core/local/filter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\nexport default class {\n\n    /**\n     * Initialise the filter on the element with the given id.\n     *\n     * @param {HTMLElement} filterSet The filter element.\n     * @param {Function} applyCallback Callback function when updateTableFromFilter\n     */\n    constructor(filterSet, applyCallback) {\n\n        this.filterSet = filterSet;\n        this.applyCallback = applyCallback;\n        // Keep a reference to all of the active filters.\n        this.activeFilters = {\n            courseid: new CourseFilter('courseid', filterSet),\n        };\n    }\n\n    init() {\n        // Add listeners for the main actions.\n        this.filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filterset.actions.addRow)) {\n                e.preventDefault();\n\n                this.addFilterRow();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n                e.preventDefault();\n\n                this.updateTableFromFilter();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n                e.preventDefault();\n\n                this.removeAllFilters();\n            }\n        });\n\n        // Add the listener to remove a single filter.\n        this.filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filter.actions.remove)) {\n                e.preventDefault();\n\n                this.removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n            }\n        });\n\n        // Add listeners for the filter type selection.\n        let filterRegion = jQuery(this.getFilterRegion());\n        CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n        filterRegion.on(CustomEvents.events.accessibleChange, e => {\n            const typeField = e.target.closest(Selectors.filter.fields.type);\n            if (typeField && typeField.value) {\n                const filter = e.target.closest(Selectors.filter.region);\n\n                this.addFilter(filter, typeField.value);\n            }\n        });\n\n        this.filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n            this.filterSet.dataset.filterverb = e.target.value;\n        });\n    }\n\n    /**\n     * Perform any tear-down for this filter.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    getFilterRegion() {\n        return this.filterSet.querySelector(Selectors.filterset.regions.filterlist);\n    }\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    addFilterRow = () => {\n        const pendingPromise = new Pending('core/filter:addFilterRow');\n        const rownum = 1 + this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core/filter_row', {\"rownumber\": rownum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.appendNodeContents(this.getFilterRegion(), html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    getFilterDataSource(filterType) {\n        const filterDataNode = this.filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    }\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    async addFilter(filterRow, filterType, initialFilterValues) {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = this.getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        this.activeFilters[filterType] = new Filter(filterType, this.filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        return this.activeFilters[filterType];\n    }\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    getFilterObject(name) {\n        return this.activeFilters[name];\n    }\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    removeOrReplaceFilterRow(filterRow, refreshContent) {\n        const filterCount = this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        if (filterCount === 1) {\n            this.replaceFilterRow(filterRow, refreshContent);\n        } else {\n            this.removeFilterRow(filterRow, refreshContent);\n        }\n    }\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    async removeFilterRow(filterRow, refreshContent = true) {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            this.updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await this.getAvailableFilterLegends();\n\n        this.getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    }\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    replaceFilterRow(filterRow, refreshContent = true, rowNum = 1) {\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core/filter_row', {\"rownumber\": rowNum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                // Refresh the table.\n                if (refreshContent) {\n                    return this.updateTableFromFilter();\n                } else {\n                    return filterRow;\n                }\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    removeFilterObject(filterName) {\n        if (filterName) {\n            const filter = this.getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete this.activeFilters[filterName];\n            }\n        }\n    }\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    removeAllFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => this.removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return this.updateTableFromFilter();\n    }\n\n    /**\n     * Remove any empty filters.\n     */\n    removeEmptyFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                this.removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    }\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    updateFiltersOptions() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (this.activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = this.filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = this.filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            this.filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            this.filterSet.dataset.filterverb = 2;\n        } else {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    updateTableFromFilter() {\n        const pendingPromise = new Pending('core/filter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(this.activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        if (this.applyCallback) {\n            this.applyCallback(filters, pendingPromise);\n        }\n    }\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    async getAvailableFilterLegends() {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n            .then(fetchedStrings => {\n                return fetchedStrings;\n            })\n            .catch(Notification.exception);\n\n        return legendStrings;\n    }\n\n}\n"],"file":"filter.min.js"}