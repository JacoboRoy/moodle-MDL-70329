{"version":3,"sources":["../src/participants_filter.js"],"names":["init","filterRegionId","filterSet","document","querySelector","coreFilter","CoreFilter","filters","pendingPromise","DynamicTable","setFilters","getTableFromId","dataset","tableRegion","jointype","parseInt","Selectors","filterset","fields","join","value","then","result","resolve","catch","Notification","exception","setFilterFromConfig","config","filterConfig","Object","entries","length","Promise","filterPromises","map","filterType","filterData","filterValues","values","addFilterRow","filterRow","addFilter","filter","promise","all","removeEmptyFilters","updateFiltersOptions","updateTableFromFilter","tableRoot","initialFilters","getFilters","initialFilterPromise","Pending"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter management.\n *\n * @module     core_user/participants_filter\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CoreFilter from 'core/filter';\nimport * as DynamicTable from 'core_table/dynamic';\nimport Selectors from 'core/local/filter/selectors';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} filterRegionId The id for the filter element.\n */\nexport const init = filterRegionId => {\n\n    const filterSet = document.querySelector(`#${filterRegionId}`);\n\n    // Initialize filter.\n    const coreFilter = new CoreFilter(filterSet,  function(filters, pendingPromise) {\n        DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    });\n    coreFilter.init();\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n            return coreFilter.addFilterRow().then(([filterRow]) => {\n                coreFilter.addFilter(filterRow, filterType, filterValues);\n            });\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return coreFilter.removeEmptyFilters();\n        })\n            .then(() => {\n                coreFilter.updateFiltersOptions();\n            })\n            .then(() => {\n                coreFilter.updateTableFromFilter();\n            });\n    };\n\n    // Initialize DynamicTable for showing result.\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core/filter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n            .then(() => initialFilterPromise.resolve())\n            .catch();\n    }\n};\n\n"],"file":"participants_filter.min.js"}